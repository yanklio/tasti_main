version: "3.8"

services:
  minio:
    image: quay.io/minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - minionetwork
    volumes:
      - "minio_data:/data"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  minio-init:
    image: quay.io/minio/mc:latest
    depends_on:
      - minio
    networks:
      - minionetwork
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        until mc alias set local http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}; do
          echo "Waiting for MinIO..."
          sleep 2
        done
        mc mb local/default --ignore-existing
        cat > /tmp/cors.json <<EOF
        {
          "CORSRules": [
            {
              "AllowedOrigins": ["http://localhost:4200", "http://localhost:9000"],
              "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
              "AllowedHeaders": ["*"],
              "ExposeHeaders": ["ETag"]
            }
          ]
        }
        EOF
        mc anonymous set-json /tmp/cors.json local/default
        echo "MinIO initialization complete!"
    restart: on-failure

  postgres:
    image: postgres:17
    ports:
      - "5432:5432"
    networks:
      - minionetwork
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=tasti
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d tasti"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

networks:
  minionetwork:
    driver: bridge

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local
